---
openapi: 3.0.3
info:
  title: E-commerce App
  contact:
    name: Mahmuda Karima
    email: dakasakti.id@gmail.com
  license:
    name: APACHE 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 1.0.0
servers:
  - url: http://54.179.1.246:8100
    description: Development
    variables:
      environment:
        default: dev
        enum:
          - dev
          - prod
paths:
  /login:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login_body"
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_login"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_invalid"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
  /register:
    post:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersSchema"
      responses:
        "201":
          description: success register user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_201_register"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
  /users/profile:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      responses:
        "200":
          description: get user by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_201_getuser"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/inline_response_200_updateUser"
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Users
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_deleteUser"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"

  /admin/categories:
    post:
      security:
        - bearerAuth: []
      tags:
        - Category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategorySchema"
      responses:
        "201":
          description: success create category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_201_create"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_invalid"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
  /admin/categories/{id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - Category
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: number
            example: 1
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
  /categories:
    get:
      tags:
        - Category
      responses:
        "200":
          description: get all category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_category"
        "404":
          description: status not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_404"
  /events:
    get:
      tags:
        - Events
      parameters:
        - name: name
          in: query
          description: filter by name
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: Object Oriented Programming
        - name: location
          in: query
          description: filter by location
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: page
          in: query
          description: halaman yang akan ditampilkan
          required: false
          style: form
          explode: true
          schema:
            type: number
            example: 1
        - name: limit
          in: query
          description: jumlah data yang akan ditampilkan dalam satu request
          required: false
          style: form
          explode: true
          schema:
            type: number
            example: 1
      responses:
        "200":
          description: get all events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfEventSchema"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
  /events/{id}:
    get:
      tags:
        - Events
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: number
            example: 1
      responses:
        "200":
          description: get  events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_1"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
  /admin/events:
    post:
      security:
        - bearerAuth: []
      tags:
        - Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventSchemainsert"
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"

  /admin/events/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Events
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: number
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventSchema"
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Events
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: number
            example: 1
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"

  /events/orders/{order_id}/status:
    get:
      security:
        - bearerAuth: []
      tags:
        - Event Participation
      responses:
        "200":
          description: get all events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfEventSchema"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
  /events/orders/{order_id}/cancel:
    get:
      security:
        - bearerAuth: []
      tags:
        - Event Participation
      responses:
        "200":
          description: get all events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfEventSchema"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
  /events/orders:
    post:
      security:
        - bearerAuth: []
      tags:
        - Event Participation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventOrderSchema"
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
  /events/comments:
    post:
      security:
        - bearerAuth: []
      tags:
        - Event Participation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/events_comments_body"
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"

  /events/comments/{id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - Event Participation
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: number
            example: 1
      responses:
        "200":
          description: success create
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"

components:
  schemas:
    # Users--
    inline_response_200_login:
      type: object
      properties:
        code:
          type: number
          example: 200
        message:
          type: string
          example: success login!
        data:
          type: object
          example:
            {
              "user": { "id": 5, "name": "Testing", "username": "testing" },
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHBpcmVkIjoxNjUyMTQxODA5LCJ1c2VyX2lkIjo1LCJ1c2VybmFtZSI6InRlc3RpbmcifQ.Y9RuumCJP2MMcw-N0ztS5wgn5jMqygecVur1eyxc8H4",
            }

    inline_response_201_register:
      type: object
      properties:
        code:
          type: number
          example: 201
        message:
          type: string
          example: success register User!
        data:
          type: object
          $ref: "#/components/schemas/UsersSchemaOut"

    inline_response_201_getuser:
      type: object
      properties:
        code:
          type: number
          example: 200
        message:
          type: string
          example: success get User!
        data:
          $ref: "#/components/schemas/UsersSchemaOut"

    inline_response_200_updateUser:
      type: object
      properties:
        code:
          type: number
          example: 200
        message:
          type: string
          example: get data!
        data:
          type: object
          example: { name: Testing, updated_at: 2022-05-10T06:01:18.51+07:00 }

    inline_response_200_deleteUser:
      type: object
      properties:
        code:
          type: number
          example: 200
        message:
          type: string
          example: get data!
        data:
          type: object
          example: { name: Testing, deleted_at: 2022-05-10T06:01:18.51+07:00 }
    UsersSchema:
      type: object
      properties:
        name:
          type: string
          example: Testing
        username:
          type: string
          example: testing@gmail.com
        hp:
          type: string
          example: 081234567890
        email:
          type: string
          example: testing@gmail.com
        password:
          type: string
          example: testing
    UsersSchemaOut:
      type: object
      properties:
        id:
          type: integer
          example: 5
        name:
          type: string
          example: Testing
        username:
          type: string
          example: testing@gmail.com
        hp:
          type: string
          example: 081234567890
        email:
          type: string
          example: testing@gmail.com
    login_body:
      type: object
      properties:
        username:
          type: string
          example: testing
        password:
          type: string
          example: testing
    SimpleUserSchema:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Rudy Sujarwo
        email:
          type: string
          example: rudy@sujarwo@gmail.com

    # Caterory--
    CategorySchema:
      type: object
      properties:
        name:
          type: string
          example: Music
    ResponseCategorySchema:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Music
        slug:
          type: string
          example: music
    inline_response_201_create:
      type: object
      properties:
        code:
          type: number
          example: 201
        message:
          type: string
          example: success create ...!
        data:
          type: object
          example: { id: 1, name: Music, created_at: 2022-05-10T06:01:18.51+07:00 }
    inline_response_200_category:
      type: object
      properties:
        code:
          type: number
          example: 200
        message:
          type: string
          example: success get all Category!
        data:
          $ref: "#/components/schemas/ArrayOfCategorySchema"
    ArrayOfCategorySchema:
      type: array
      items:
        $ref: "#/components/schemas/ResponseCategorySchema"

    # Invalid
    inline_response_400_invalid:
      type: object
      properties:
        code:
          type: number
          example: 400
        message:
          type: string
          example: "invalid request (salah type)"
        data:
          type: object
          example:
    # not Allow
    inline_response_403:
      type: object
      properties:
        code:
          type: number
          example: 403
        message:
          type: string
          example: "You are not allowed to access this resource"
        data:
          type: object
          example:
    # Wrong
    inline_response_401:
      type: object
      properties:
        code:
          type: number
          example: 401
        message:
          type: string
          example: "user or password is wrong"
        data:
          type: object
          example:
    EventSchema:
      type: object
      properties:
        name:
          type: string
          example: "Webinar: Your Product Manager Career by PlayStation Sr PM"
        hosted_by:
          type: string
          example: Product School
        date_start:
          type: string
          format: date-time
        date_end:
          type: string
          format: date-time
        location:
          type: string
          example: Jakarta
        details:
          type: string
          example: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.
        tickets:
          type: integer
          example: 15
        image:
          type: string
          example: https://belajar-be.s3.ap-southeast-1.amazonaws.com/ahsadadnank.png
    EventOrderSchema:
      type: object
      properties:
        event_id:
          type: number
          example: 1
        payment_type:
          type: string
          example: "gopay"
        total:
          type: number
          example: 100000
    EventSchemainsert:
      type: object
      properties:
        name:
          type: string
          example: "Webinar: Your Product Manager Career by PlayStation Sr PM"
        hosted_by:
          type: string
          example: Product School
        date_start:
          type: string
          format: date-time
        date_end:
          type: string
          format: date-time
        location:
          type: string
          example: Jakarta
        details:
          type: string
          example: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.
        tickets:
          type: integer
          example: 15

    ArrayOfEventSchema:
      type: object
      properties:
        code:
          type: number
          example: 200
        message:
          type: string
          example: "success"
        data:
          type: array
          example:
          $ref: "#/components/schemas/EventSchema"

    # not found
    inline_response_404:
      type: object
      properties:
        code:
          type: number
          example: 404
        message:
          type: string
          example: "(...) not found"
        data:
          type: object
          example:

    inline_response_200:
      type: object
      properties:
        code:
          type: number
          example: 200
        message:
          type: string
          example: Successful Operation
    inline_response_400:
      type: object
      properties:
        code:
          type: number
          example: 400
        message:
          type: string
          example: Bad Request
    inline_response_200_1:
      allOf:
        - $ref: "#/components/schemas/EventSchema"
        - type: object
          properties:
            participants:
              type: array
              items:
                type: string
                example: Iswanul Umam
    inline_response_200_2:
      type: object
      properties:
        name:
          type: string
          example: Iswanul
        comment:
          type: string
          example: I Think This is Great Event
    events_comments_body:
      type: object
      properties:
        event_id:
          type: integer
          example: 12
        field:
          type: string
          example: I think this is great event
  responses:
    Response200:
      description: success create
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_200"
    Response400:
      description: bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_400"
